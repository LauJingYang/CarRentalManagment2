@page "/bookings"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using CarRentalManagement2.Domain
@using CarRentalManagment2.Data
@implements IAsyncDisposable
@inject IDbContextFactory<CarRentalManagment2.Data.CarRentalManagment2Context> DbFactory
@rendermode InteractiveServer

@attribute [Authorize(Roles = "Administrator, User")]

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="bookings/create">Create New</a>
</p>

<QuickGrid Class="table" Items="FilteredBookings" Pagination="paginationState">
    <PropertyColumn Property="booking => booking.DateOut" Sortable="true" />
    <PropertyColumn Property="booking => booking.DateOut" />
    <PropertyColumn Property="booking => booking.DateIn" />
    <PropertyColumn Property="booking => booking.VechicleId" />
    <PropertyColumn Property="booking => booking.CustomerId" />
   @*  <PropertyColumn Property="booking => booking.DateCreated" />
    <PropertyColumn Property="booking => booking.DateUpdated" />
    <PropertyColumn Property="booking => booking.CreatedBy" />
    <PropertyColumn Property="booking => booking.UpdatedBy" /> *@

    <TemplateColumn Context="booking" Title="Vehicle">
        @GetVehicleString(booking.VechicleId)
    </TemplateColumn>
    <TemplateColumn Context="booking" Title="Customer">
        @GetCustomerString(booking.CustomerId)
    </TemplateColumn>
@*
<PropertyColumn Property="booking => booking.VehicleId" Sortable="true" />
<PropertyColumn Property="booking => booking.CustomerId" Sortable="true" />
*@

    <TemplateColumn Context="booking">
        <a href="@($"bookings/edit?id={booking.Id}")">Edit</a> |
        <a href="@($"bookings/details?id={booking.Id}")">Details</a> 
        @* <a href="@($"bookings/delete?id={booking.Id}")">Delete</a> *@
        <AuthorizeView Roles="Administrator">
            | <a href="@($"bookings/delete?id={booking.Id}")">Delete</a>
        </AuthorizeView>
    </TemplateColumn>
</QuickGrid>
<Paginator State="paginationState" />


@code {
    PaginationState paginationState = new PaginationState { ItemsPerPage = 1 };
    private CarRentalManagment2Context context = default!;
    private string userId = string.Empty;
    private bool isAdmin = false;
    @inject AuthenticationStateProvider authenticationStateProvider

    // Filter bookings by userId
    private IQueryable<Booking> FilteredBookings => isAdmin
    ? context.Booking // Admins can see all bookings
    : context.Booking.Where(e => e.CreatedBy == userId); // Regular users see only their own bookings

    //Declare and initialize IList and Dictionaries
    private IList<Vehicle> Vehicles;
    private IList<Customer> Customers;
    private Dictionary<int, Make> MakesDict = new Dictionary<int, Make>();
    private Dictionary<int, Model> ModelsDict = new Dictionary<int, Model>();
    private Dictionary<int, Colour> ColoursDict = new Dictionary<int, Colour>();

    // GetVehicleString method to get the vehicle string
    private string GetVehicleString(int vehicleId)
    {
        var vehicle = Vehicles.FirstOrDefault(v => v.Id == vehicleId);
        return vehicle == null ? string.Empty :
        $"{MakesDict[vehicle.MakeId].Name} {ModelsDict[vehicle.ModelId].Name} {ColoursDict[vehicle.ColourId].Name}";
    }

    // GetCustomerString method to get the customer string
    private string GetCustomerString(int customerId)
    {
        var customer = Customers.FirstOrDefault(c => c.Id == customerId);
        return customer == null ?
        string.Empty : $"{customer.DrivingLicense} - Contact:{customer.ContactNumber}";
    }

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
